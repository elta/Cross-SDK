#! /bin/bash

if [ x${MOD} != "x" ]; then
  if [ ${MOD} = "gnu-rootfs" ]; then
    export METADATAMIPSELKERNEL=${METADATAMIPSELROOTFSMOD}
  elif [ ${MOD} = "busybox" ]; then
    export METADATAMIPSELKERNEL=${METADATAMIPSELBUSYBOXMOD}
  fi
fi

[ -d "${SRCMIPS64ELKERNEL}" ] || mkdir -p "${SRCMIPS64ELKERNEL}"
[ -d "${METADATAMIPS64ELKERNEL}" ] || mkdir -p "${METADATAMIPS64ELKERNEL}"
[ -d "${METADATAEXTRACT}" ] || mkdir -p "${METADATAEXTRACT}"
[ -d "${PREFIXGNULINUX}" ] || mkdir -p "${PREFIXGNULINUX}"

mkdir -p ${PREFIXMIPS64ELROOTFS}
mkdir -p ${PREFIXMIPS64ELROOTFS}/boot

export PATH=${PREFIXHOSTTOOLS}/bin:${PREFIXMIPS64ELTOOLCHAIN}/bin:$PATH

############################### Extract tarballs ##############################
pushd ${SRCMIPS64ELKERNEL}
[ -f "${METADATAEXTRACT}/linux_extract" ] || \
  tar xf ${TARBALL}/linux-${LINUX_VERSION}.${LINUX_SUFFIX} || \
    die "extract linux error" && \
      touch ${METADATAEXTRACT}/linux_extract
popd

pushd ${SRCMIPS64ELKERNEL}
cd linux-${LINUX_VERSION}
if [ ${HOSTOS} = "Darwin" ]; then
[ -f ${METADATAEXTRACT}/linux_mac_patch ] || \
  patch -p1 < ${PATCH}/linux-${LINUX_VERSION}-mips-macos.patch || \
    die "***Patch linux mac config error" && \
      touch ${METADATAEXTRACT}/linux_mac_patch
[ -f ${METADATAEXTRACT}/linux_mac2_patch ] || \
  patch -p1 < ${PATCH}/linux-${LINUX_VERSION}-mips-macos-2.patch || \
    die "***Patch linux mac2 config error" && \
      touch ${METADATAEXTRACT}/linux_mac2_patch
fi
[ -f "${METADATAEXTRACT}/linux_patch_mips64el_defconfig" ] || \
  patch -p1 < ${PATCH}/linux-mips64el-multilib-defconfig.patch || \
    die "patch mips64el-multilib-defconfig error" && \
      touch ${METADATAEXTRACT}/linux_patch_mips64el_defconfig
[ -f "${METADATAMIPS64ELKERNEL}/linux_mrpro" ] || \
  make mrproper || die "clean linux error" || \
    die "clean linux error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_mrpro
[ -f "${METADATAMIPS64ELKERNEL}/linux_config_mips64el_mul" ] || \
  make ARCH=mips mips64el_multilib_defconfig || \
    die "config mips64el_multilib_defconfig error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_config_mips64el_mul
[ -f "${METADATAMIPS64ELKERNEL}/linux_build_kernel" ] || \
  make -j${JOBS} ARCH=mips CROSS_COMPILE=${CROSS_TARGET64}- \
  CFLAGS="${BUILD64}" || \
    die "build linux error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_build_kernel
if [ ${MOD} = "gnu-rootfs" ]; then
[ -f "${METADATAMIPS64ELKERNEL}/linux_mod_rootfs_install" ] || \
  make ARCH=mips CROSS_COMPILE=${CROSS_TARGET64}- CFLAGS="${BUILD64}" \
  INSTALL_MOD_PATH=${PREFIXMIPS64ELROOTFS} modules_install || \
    die "install rootfs linux modules error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_mod_rootfs_install
elif [ ${MOD} = "busybox" ]; then
[ -f "${METADATAMIPS64ELKERNEL}/linux_mod_busybox_install" ] || \
  make ARCH=mips CROSS_COMPILE=${CROSS_TARGET64}- CFLAGS="${BUILD64}" \
  INSTALL_MOD_PATH=${PREFIXMIPS64ELBUSYBOX} modules_install || \
    die "install busybox rootfs linux modules error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_mod_busybox_install
else
  echo "no mods installed"
fi
[ -f "${METADATAMIPS64ELKERNEL}/linux_cp_vmlinux" ] || \
  cp vmlinux ${PREFIXGNULINUX}/vmlinux-64 || \
    die "cp vmlinux error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_cp_vmlinux
[ -f "${METADATAMIPS64ELKERNEL}/linux_cp_vmlinux.32" ] || \
  cp vmlinux.32 ${PREFIXGNULINUX}/vmlinux-n32 || \
    die "cp vmlinux.32 error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_cp_vmlinux.32
[ -f "${METADATAMIPS64ELKERNEL}/linux_cp_system.map" ] || \
  cp System.map ${PREFIXMIPS64ELROOTFS}/boot/System.map-2.6.30.1 || \
    die "cp System.map error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_cp_system.map
[ -f "${METADATAMIPS64ELKERNEL}/linux_cp_config" ] || \
  cp .config ${PREFIXMIPS64ELROOTFS}/boot/config-2.6.30.1 || \
    die "cp config file error" && \
      touch ${METADATAMIPS64ELKERNEL}/linux_cp_config
popd

touch ${METADATAMIPS64ELKERNEL}/linux_n32_64_kernel_finished
