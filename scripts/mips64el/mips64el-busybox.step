#! /bin/bash

export PATH=${PREFIXHOSTTOOLS}/bin:${PREFIXMIPS64ELTOOLCHAIN}/bin:${PATH}
export CC=${CROSS_TARGET64}-gcc
export CFLAGS="-isystem ${PREFIXMIPS64ELROOTFS}/usr/include ${BUILD64}"
export CXX=${CROSS_TARGET64}-g++
export CXXFLAGS="-isystem ${PREFIXMIPS64ELROOTFS}/usr/include ${BUILD64}"
export LDFLAGS="-Wl,-rpath-link,${PREFIXMIPS64ELROOTFS}/usr/lib64:${PREFIXMIPS64ELROOTFS}/lib64 ${BUILD64}"

[ -d "${SRCBUSYBOX_64}" ] || mkdir -p "${SRCBUSYBOX_64}"
[ -d "${METADATABUSYBOX_64}" ] || mkdir -p "${METADATABUSYBOX_64}"
[ -d "${PREFIXMIPS64ELBUSYBOX}" ] || mkdir -p "${PREFIXMIPS64ELBUSYBOX}"

[ -f ${PREFIXMIPS64ELTOOLCHAIN}/bin/${CC} ] || die "No toolchain found, process error"

export BUSYBOX_OPTIONS="dynamic"

pushd ${SRCBUSYBOX_64}
[ -f ${METADATAEXTRACT}/busybox-extract ] || \
  tar xf ${TARBALL}/busybox-${BUSYBOX_VERSION}.${BUSYBOX_SUFFIX} || \
    die "busybox extract error" && \
      touch ${METADATAEXTRACT}/busybox-extract
popd

# Begin for loop, build static/dynamic busybox.
for option in ${BUSYBOX_OPTIONS}; do

pushd ${SRCBUSYBOX_64}/busybox-${BUSYBOX_VERSION}
if [ ${HOSTOS} = "Darwin" ]; then
[ -f ${METADATAEXTRACT}/busybox-1.20.2-macos.patch ] || \
  patch -Np1 -i ${PATCH}/busybox-${BUSYBOX_VERSION}-macos.patch || \
    die "Patch for MacOS failed" && \
      touch ${METADATAEXTRACT}/busybox-1.20.2-macos.patch
[ -f ${METADATAEXTRACT}/busybox-1.20.2-macos-2.patch ] || \
  patch -Np1 -i ${PATCH}/busybox-${BUSYBOX_VERSION}-macos-2.patch || \
    die "Patch 2nd for MacOS failed" && \
      touch ${METADATAEXTRACT}/busybox-1.20.2-macos-2.patch
fi
[ -f ${METADATAEXTRACT}/busybox-${option}-patch-busybox-${BUSYBOX_VERSION} ] || \
  patch -Np1 -i ${PATCH}/busybox-${BUSYBOX_VERSION}.patch || \
    die "Patch failed" && \
      touch ${METADATAEXTRACT}/busybox-${option}-patch-busybox-${BUSYBOX_VERSION}
[ -f ${METADATABUSYBOX_64}/busybox-${option}-patch-busybox-mips64el-${option}_defconfig ] || \
  patch -Np1 -i ${PATCH}/busybox-mips64el-${option}_defconfig.patch \
    || die "Patch failed" && \
      touch ${METADATABUSYBOX_64}/busybox-${option}-patch-busybox-mips64el-${option}_defconfig
[ -f ${METADATABUSYBOX_64}/busybox-${option}-config ] || \
  make mips64el-${option}_defconfig || \
    die "busybox-${option}-config error" && \
      touch ${METADATABUSYBOX_64}/busybox-${option}-config
[ -f ${METADATABUSYBOX_64}/busybox-${option}-build ] || \
  make -j${JOBS} ARCH=mips CROSS_COMPILE=${CROSS_TARGET64}- || \
    die "busybox-${option}-build error" && \
      touch ${METADATABUSYBOX_64}/busybox-${option}-build
[ -f ${METADATABUSYBOX_64}/busybox-${option}-install ] || \
  make ARCH=mips CROSS_COMPILE=${CROSS_TARGET64}- install || \
    die "busybox-${option}-install error" && \
      touch ${METADATABUSYBOX_64}/busybox-${option}-install
[ -f ${METADATABUSYBOX_64}/copy-busybox-${option} ] || \
  cp -a _install/* ${PREFIXMIPS64ELBUSYBOX} || \
    die "copy busybox-${option} error" && \
      touch ${METADATABUSYBOX_64}/copy-busybox-${option}
[ -f ${METADATABUSYBOX_64}/busybox-clean ] || \
  make distclean || \
    die "clean busybox error" && \
      touch ${METADATABUSYBOX_64}/busybox-clean
popd

if [ ${HOSTOS} = "Linux" ]; then
sudo cp -ar ${SRCBUSYBOX_64}/busybox-${BUSYBOX_VERSION}/examples/bootfloppy/etc ${PREFIXMIPS64ELBUSYBOX}/
elif [ ${HOSTOS} = "Darwin" ]; then
cp -a ${SRCBUSYBOX_64}/busybox-${BUSYBOX_VERSION}/examples/bootfloppy/etc ${PREFIXMIPS64ELBUSYBOX}/
fi

mkdir ${PREFIXMIPS64ELBUSYBOX}/dev
mkdir ${PREFIXMIPS64ELBUSYBOX}/proc

if [ ${HOSTOS} != "Darwin" ]; then
sudo cp -a /dev/zero ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/console ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/null ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/tty ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/tty1 ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/tty2 ${PREFIXMIPS64ELBUSYBOX}/dev/
sudo cp -a /dev/ttyS0 ${PREFIXMIPS64ELBUSYBOX}/dev/
fi

# Copy Library to File System
if [ -d ${PREFIXMIPS64ELROOTFS}/lib ]; then
    cp -ar ${PREFIXMIPS64ELROOTFS}/lib ${PREFIXMIPS64ELBUSYBOX}/
fi

if [ -d ${PREFIXMIPS64ELROOTFS}/lib32 ]; then
    cp -ar ${PREFIXMIPS64ELROOTFS}/lib32 ${PREFIXMIPS64ELBUSYBOX}/
fi

if [ -d ${PREFIXMIPS64ELROOTFS}/lib64 ]; then
    cp -ar ${PREFIXMIPS64ELROOTFS}/lib64 ${PREFIXMIPS64ELBUSYBOX}/
fi

echo "/bin/mount -o remount,rw /" >> ${PREFIXMIPS64ELBUSYBOX}/etc/init.d/rcS
done

touch ${METADATABUSYBOX_64}/mips64el_busybox_finished
